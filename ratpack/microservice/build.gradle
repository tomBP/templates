// --------------------------------------------------------------------------------
//  MICROSERVICE
// --------------------------------------------------------------------------------

// --------------------------------------------------------------------------------
//  BUILD
// --------------------------------------------------------------------------------

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}

group = 'io.tbp.microservice'

buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    ext {
        asciidoctorVersion = '1.5.3'
        cglibVersion = '3.2.4'
        collectionValidatorVersion = '2.1.6'
        groovyVersion = '2.4.7'
        hibernateValidatorVersion = '5.2.4.Final'
        javaxVersion = '2.2.4'
        log4jVersion = '2.7'
        objenesisVersion = '2.4'
        ratpackVersion = '1.4.4'
        releasePluginVersion = '2.4.1'
        restdocsVersion = '1.1.2.RELEASE'
        snakeyamlVersion = '1.16'
        spockVersion = '1.0-groovy-2.4'
        springBootVersion = '1.3.8.RELEASE'
        disruptorVersion = '3.3.6'
    }
    dependencies {
        classpath "net.researchgate:gradle-release:${releasePluginVersion}"
        classpath "gradle.plugin.io.ratpack:ratpack-gradle:${ratpackVersion}"
        classpath "org.yaml:snakeyaml:${snakeyamlVersion}"
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:${asciidoctorVersion}"
    }
}

apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'codenarc'
apply plugin: 'io.ratpack.ratpack-groovy'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'net.researchgate.release'

repositories {
    jcenter()
}

// --------------------------------------------------------------------------------
// APPLICATION PLUGIN CONFIG
// See https://ratpack.io/manual/current/gradle.html#the_application_plugin
// --------------------------------------------------------------------------------

mainClassName = 'io.tbp.microservice.Application'

// --------------------------------------------------------------------------------
//  FUNCTIONAL TESTS
//  Create a separate src/functional-test dir for functional tests.
//  Functional tests are tests that test the application as a whole and
//  do not mock out any part. In keeping with standard conventions source code
//  is placed in a groovy sub dir and resources in a resources sub dir.
// --------------------------------------------------------------------------------

sourceSets {
    functionalTest {
        groovy.srcDir file('src/functional-test/groovy')
        resources.srcDir file('src/functional-test/resources')
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    functionalTestCompile.extendsFrom testCompile
    functionalTestRuntime.extendsFrom testRuntime
}

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
}

check.dependsOn functionalTest
functionalTest.mustRunAfter test

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

idea {
    module {
        scopes.TEST.plus += [configurations.functionalTestCompile]
    }
}

// --------------------------------------------------------------------------------
//  DEPENDENCIES
// --------------------------------------------------------------------------------

dependencies {
    // Groovy
    compile "org.codehaus.groovy:groovy-all:${groovyVersion}"

    // Async Log4J2 Logging
    compile "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
    compile "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    compile "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    compile "com.lmax:disruptor:${disruptorVersion}"

    // Validation annotations
    compile "org.hibernate:hibernate-validator:${hibernateValidatorVersion}"
    compile "cz.jirutka.validator:validator-collection:${collectionValidatorVersion}"
    compile "javax.el:javax.el-api:${javaxVersion}"
    compile "org.glassfish.web:javax.el:${javaxVersion}"

    // Ratpack
    compile ratpack.dependency('rx')
    compile ratpack.dependency('dropwizard-metrics')
    compile ratpack.dependency('spring-boot')
    compile ratpack.dependency('pac4j')
    compile ratpack.dependency('session')

    // Ratpack test
    testCompile ratpack.dependency('test')

    // Spring rest docs
    functionalTestCompile("org.springframework.restdocs:spring-restdocs-restassured:${restdocsVersion}") {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
    }

    // Spock tests
    testCompile("org.spockframework:spock-core:${spockVersion}") {
        exclude module: 'groovy-all'
    }
    testCompile "cglib:cglib:${cglibVersion}"
    testCompile "org.objenesis:objenesis:${objenesisVersion}"
}

// --------------------------------------------------------------------------------
//  DOCUMENTATION CONFIG
//  Running the functional tests generates asciidoc snippets for the API endpoints
//  in build/generated-snippets. The static documentation in src/docs incorporates
//  those snippets and is converted to HTML by the asciidoctor plugin. The HTML is
//  outputted to the src/ratpack/public/docs directory which Ratpack serves
//  statically from /docs.
// --------------------------------------------------------------------------------

ext {
    snippetsDir = file('build/generated-snippets')
    docDir = "$projectDir/src/main/resources/public/docs"
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    attributes 'snippets': snippetsDir
    inputs.dir snippetsDir
    sourceDir = file('src/docs')
    outputDir docDir
    dependsOn functionalTest
}

build {
    dependsOn asciidoctor
}

task cleanGeneratedDoc(type: Delete) {
    delete fileTree(dir: docDir)
}

clean {
    dependsOn cleanGeneratedDoc
}

applicationDistribution.from(asciidoctor) {
    into "app/public/docs"
}

// --------------------------------------------------------------------------------
//  CODENARC GROOVY LINTER
//  Lints groovy code and fails the build if any errors were found. Offers
//  the option to configure a different ruleset for each gradle configuration.
// --------------------------------------------------------------------------------

def codenarcDir = 'gradle/codenarc'
codenarcMain {
    ignoreFailures false
    configFile rootProject.file("${codenarcDir}/codenarc.groovy")
}

codenarcTest {
    ignoreFailures false
    configFile rootProject.file("${codenarcDir}/codenarcTest.groovy")
}

codenarcFunctionalTest {
    ignoreFailures false
    configFile rootProject.file("${codenarcDir}/codenarcTest.groovy")
}
